<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Live Weather Dashboard</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #2c5530 0%, #1a3d1f 100%);
      min-height: 100vh;
      padding: 20px;
    }
    .container { max-width: 1200px; margin: 0 auto; }
    .header { text-align: center; color: white; margin-bottom: 30px; }
    .header h1 {
      font-size: 2.5rem;
      margin-bottom: 10px;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    .search-container { display: flex; justify-content: center; margin-bottom: 30px; gap: 10px; }
    .search-input {
      padding: 12px 20px; border: none; border-radius: 25px;
      font-size: 16px; width: 300px; outline: none;
    }
    .search-btn, .location-btn {
      padding: 12px 20px; border: none; border-radius: 25px;
      background: #28a745; color: white; cursor: pointer;
      font-size: 16px; transition: background 0.3s;
    }
    .search-btn:hover, .location-btn:hover { background: #218838; }
    .weather-grid { display: grid; grid-template-columns: 2fr 1fr; gap: 20px; margin-bottom: 30px; }
    .main-weather {
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
      border-radius: 20px; padding: 30px;
      color: white; text-align: center;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .weather-details { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; }
    .detail-card {
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
      border-radius: 15px; padding: 20px;
      color: white; text-align: center;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .city-name { font-size: 2rem; margin-bottom: 10px; }
    .temperature { font-size: 4rem; font-weight: bold; margin: 20px 0; }
    .weather-desc { font-size: 1.2rem; text-transform: capitalize; margin-bottom: 20px; }
    .weather-icon { font-size: 4rem; margin: 20px 0; }
    .detail-title { font-size: 0.9rem; opacity: 0.8; margin-bottom: 5px; }
    .detail-value { font-size: 1.5rem; font-weight: bold; }
    .forecast-container {
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
      border-radius: 20px; padding: 30px;
      color: white; border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .forecast-title { text-align: center; font-size: 1.5rem; margin-bottom: 20px; }
    .forecast-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 15px; }
    .forecast-item {
      background: rgba(255, 255, 255, 0.15);
      border-radius: 10px; padding: 15px;
      text-align: center; border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .forecast-day { font-size: 0.9rem; margin-bottom: 5px; opacity: 0.8; }
    .forecast-temp { font-size: 1.1rem; font-weight: bold; }
    .loading { text-align: center; color: white; font-size: 1.2rem; margin: 50px 0; }
    .error {
      background: rgba(255, 0, 0, 0.2);
      color: white; padding: 15px;
      border-radius: 10px; text-align: center;
      margin: 20px 0;
    }
    .last-updated { text-align: center; color: rgba(255, 255, 255, 0.7); margin-top: 20px; font-size: 0.9rem; }
    @media (max-width: 768px) {
      .weather-grid { grid-template-columns: 1fr; }
      .weather-details { grid-template-columns: 1fr; }
      .search-input { width: 250px; }
      .temperature { font-size: 3rem; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üå§Ô∏è Live Weather Dashboard</h1>
      <p>Get real-time weather information for any location</p>
    </div>

    <div class="search-container">
      <input type="text" class="search-input" placeholder="Enter city name..." id="cityInput">
      <button class="search-btn" onclick="searchWeather()">Search</button>
      <button class="location-btn" onclick="getCurrentLocation()">My Location</button>
    </div>

    <div id="loadingDiv" class="loading" style="display: none;">üîÑ Loading weather data...</div>
    <div id="errorDiv" class="error" style="display: none;"></div>

    <div id="weatherContent" style="display: none;">
      <div class="weather-grid">
        <div class="main-weather">
          <div class="city-name" id="cityName">-</div>
          <div class="weather-icon" id="weatherIcon">‚òÄÔ∏è</div>
          <div class="temperature" id="temperature">-¬∞</div>
          <div class="weather-desc" id="weatherDesc">-</div>
          <div class="detail-title">Feels like</div>
          <div class="detail-value" id="feelsLike">-¬∞</div>
        </div>

        <div class="weather-details">
          <div class="detail-card">
            <div class="detail-title">Humidity</div>
            <div class="detail-value" id="humidity">-%</div>
          </div>
          <div class="detail-card">
            <div class="detail-title">Wind Speed</div>
            <div class="detail-value" id="windSpeed">- km/h</div>
          </div>
          <div class="detail-card">
            <div class="detail-title">Pressure</div>
            <div class="detail-value" id="pressure">- hPa</div>
          </div>
          <div class="detail-card">
            <div class="detail-title">Visibility</div>
            <div class="detail-value" id="visibility">- km</div>
          </div>
        </div>
      </div>

      <div class="forecast-container">
        <div class="forecast-title">5-Day Forecast</div>
        <div class="forecast-grid" id="forecastGrid"></div>
      </div>

      <div class="last-updated" id="lastUpdated"></div>
    </div>
  </div>

  <script>
    const API_KEY = 'YOUR_API_KEY_HERE';  // Replace with your OpenWeatherMap API key
    const BASE_URL = 'https://api.openweathermap.org/data/2.5';

    const weatherIcons = {
      '01d': '‚òÄÔ∏è', '01n': 'üåô',
      '02d': '‚õÖ', '02n': '‚òÅÔ∏è',
      '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
      '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
      '09d': 'üåßÔ∏è', '09n': 'üåßÔ∏è',
      '10d': 'üå¶Ô∏è', '10n': 'üåßÔ∏è',
      '11d': '‚õàÔ∏è', '11n': '‚õàÔ∏è',
      '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
      '50d': 'üå´Ô∏è', '50n': 'üå´Ô∏è'
    };

    let updateInterval;

    window.onload = function () {
      if (API_KEY === 'YOUR_API_KEY_HERE') {
        showError('Please set your OpenWeatherMap API key in the code');
        return;
      }
      getCurrentLocation();
      document.getElementById('cityInput').addEventListener('keypress', function (e) {
        if (e.key === 'Enter') searchWeather();
      });
    };

    async function searchWeather() {
      const city = document.getElementById('cityInput').value.trim();
      if (!city) { showError('Please enter a city name'); return; }
      await fetchWeatherData(`${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`);
    }

    function getCurrentLocation() {
      if (navigator.geolocation) {
        showLoading();
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            await fetchWeatherData(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);
          },
          () => {
            showError('Unable to get your location. Please search for a city manually.');
            hideLoading();
          }
        );
      } else {
        showError('Geolocation is not supported by your browser');
      }
    }

    async function fetchWeatherData(url) {
      try {
        showLoading();
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Weather data not found (${response.status})`);
        const weatherData = await response.json();

        const forecastResponse = await fetch(`${BASE_URL}/forecast?q=${weatherData.name}&appid=${API_KEY}&units=metric`);
        const forecastData = forecastResponse.ok ? await forecastResponse.json() : null;

        updateWeatherDisplay(weatherData, forecastData);
        hideLoading();

        clearInterval(updateInterval);
        updateInterval = setInterval(() => { fetchWeatherData(url); }, 600000);
      } catch (error) {
        console.error('Error fetching weather data:', error);
        showError(`Error: ${error.message}`);
        hideLoading();
      }
    }

    function updateWeatherDisplay(weatherData, forecastData) {
      document.getElementById('cityName').textContent = `${weatherData.name}, ${weatherData.sys.country}`;
      document.getElementById('temperature').textContent = `${Math.round(weatherData.main.temp)}¬∞C`;
      document.getElementById('weatherDesc').textContent = weatherData.weather[0].description;
      document.getElementById('feelsLike').textContent = `${Math.round(weatherData.main.feels_like)}¬∞C`;

      const iconCode = weatherData.weather[0].icon;
      document.getElementById('weatherIcon').textContent = weatherIcons[iconCode] || 'üå§Ô∏è';

      document.getElementById('humidity').textContent = `${weatherData.main.humidity}%`;
      document.getElementById('windSpeed').textContent = `${Math.round(weatherData.wind.speed * 3.6)} km/h`;
      document.getElementById('pressure').textContent = `${weatherData.main.pressure} hPa`;
      document.getElementById('visibility').textContent = `${(weatherData.visibility / 1000).toFixed(1)} km`;

      if (forecastData) updateForecastDisplay(forecastData);

      document.getElementById('lastUpdated').textContent = `Last updated: ${new Date().toLocaleString()}`;
      document.getElementById('weatherContent').style.display = 'block';
    }

    function updateForecastDisplay(forecastData) {
      const forecastGrid = document.getElementById('forecastGrid');
      forecastGrid.innerHTML = '';
      const dailyForecasts = [];
      const processedDates = new Set();

      for (const forecast of forecastData.list) {
        const date = new Date(forecast.dt * 1000);
        const dateKey = date.toDateString();
        if (!processedDates.has(dateKey) && dailyForecasts.length < 5) {
          processedDates.add(dateKey);
          dailyForecasts.push({
            date: date,
            temp: Math.round(forecast.main.temp),
            icon: forecast.weather[0].icon,
            desc: forecast.weather[0].description
          });
        }
      }

      dailyForecasts.forEach(forecast => {
        const forecastItem = document.createElement('div');
        forecastItem.className = 'forecast-item';
        const dayName = forecast.date.toLocaleDateString('en-US', { weekday: 'short' });
        const icon = weatherIcons[forecast.icon] || 'üå§Ô∏è';
        forecastItem.innerHTML = `
          <div class="forecast-day">${dayName}</div>
          <div style="font-size: 1.5rem; margin: 5px 0;">${icon}</div>
          <div class="forecast-temp">${forecast.temp}¬∞C</div>
        `;
        forecastGrid.appendChild(forecastItem);
      });
    }

    function showLoading() {
      document.getElementById('loadingDiv').style.display = 'block';
      document.getElementById('weatherContent').style.display = 'none';
    }

    function hideLoading() {
      document.getElementById('loadingDiv').style.display = 'none';
    }

    function showError(message) {
      document.getElementById('errorDiv').textContent = message;
      document.getElementById('errorDiv').style.display = 'block';
      document.getElementById('weatherContent').style.display = 'none';
    }
  </script>
</body>
</html>
